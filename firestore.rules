rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }
    
    function canAccessDepartment(departmentId) {
      let userData = getUserData();
      return userData.role == 'VICE_CHAIRPERSON' ? 
        userData.departments.hasAny([departmentId]) :
        userData.department == departmentId;
    }

    // Department rules
    match /departments/{departmentId} {
      allow read: if isAuthenticated() && 
        (hasRole('TEACHER_INCHARGE') || 
         hasRole('CHAIRPERSON') || 
         canAccessDepartment(departmentId));
      allow write: if isAuthenticated() && 
        (hasRole('TEACHER_INCHARGE') || 
         hasRole('CHAIRPERSON') || 
         (hasRole('VICE_CHAIRPERSON') && canAccessDepartment(departmentId)));
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /budgetRequests/{requestId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.requesterId ||
        hasRole('CHAIRPERSON') ||
        hasRole('TEACHER_INCHARGE')
      );
      allow create: if isAuthenticated() && (
        hasRole('HOD') ||
        hasRole('VICE_CHAIRPERSON')
      );
      allow update: if isAuthenticated() && (
        hasRole('CHAIRPERSON') ||
        hasRole('TEACHER_INCHARGE')
      );
    }
  }
} 